CREATE OR REPLACE PROCEDURE silver.load_silver_data()
LANGUAGE plpgsql
AS $$
DECLARE
    -- Variables to store timestamps for each table's loading
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration INTERVAL;
    batch_start_time TIMESTAMP;
    batch_end_time TIMESTAMP;
    batch_duration INTERVAL;
BEGIN
    -- Set the date style for the current session to Day-Month-Year
    SET datestyle TO 'DMY';

    RAISE NOTICE '=============================================';
    RAISE NOTICE 'Loading Silver Layer';
    RAISE NOTICE '=============================================';

    batch_start_time := clock_timestamp(); -- Start calculating the loading time of the whole Silver Layer

    RAISE NOTICE '---------------------------------------------';
    RAISE NOTICE 'Loading CRM Tables to Silver Layer';
    RAISE NOTICE '---------------------------------------------';

    -- --- Load silver.crm_cust_info ---
    BEGIN
        start_time := clock_timestamp(); -- Record start time for this table
        RAISE NOTICE 'Attempting to load silver.crm_cust_info...';
        TRUNCATE TABLE silver.crm_cust_info;
        INSERT INTO silver.crm_cust_info (
            cst_id,
            cst_key,
            cst_firstname,
            cst_lastname,
            cst_marital_status,
            cst_gndr,
            dwh_create_date -- Assuming this column exists in silver.crm_cust_info
        )
        SELECT
            cst_id,
            cst_key,
            -- Data Cleaning
            TRIM(cst_firstname) AS cst_firstname,
            TRIM(cst_lastname) AS cst_lastname,
            -- Data Standardization and Normalization
            CASE
                WHEN TRIM(UPPER(cst_marital_status)) = 'M' THEN 'Married'
                WHEN TRIM(UPPER(cst_marital_status)) = 'S' THEN 'Single'
                ELSE 'n/a' -- Handling Missing Data
            END AS cst_marital_status,
            CASE
                WHEN TRIM(UPPER(cst_gndr)) = 'M' THEN 'Male'
                WHEN TRIM(UPPER(cst_gndr)) = 'F' THEN 'Female'
                ELSE 'n/a' -- Handling Missing Data
            END AS cst_gndr,
            cst_create_date -- Assuming this is the source column for dwh_create_date
        FROM
        (
            -- Removing Duplicates
            SELECT
                *,
                RANK() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
            FROM bronze.crm_cust_info
        )t
        WHERE flag_last = 1;

        end_time := clock_timestamp(); -- Record end time for this table
        duration := end_time - start_time; -- Calculate duration
        RAISE NOTICE 'Successfully loaded silver.crm_cust_info.';
        RAISE NOTICE '>> Duration to Load silver.crm_cust_info Table: %', duration;
    EXCEPTION
        WHEN data_exception THEN
            RAISE WARNING 'Data error loading silver.crm_cust_info: SQLSTATE % - %', SQLSTATE, SQLERRM;
        WHEN OTHERS THEN
            RAISE WARNING 'An unexpected error occurred loading silver.crm_cust_info: SQLSTATE % - %', SQLSTATE, SQLERRM;
    END;


    -- --- Load silver.crm_prd_info ---
    BEGIN
        start_time := clock_timestamp(); -- Record start time for this table
        RAISE NOTICE 'Attempting to load silver.crm_prd_info...';
        TRUNCATE TABLE silver.crm_prd_info;
        INSERT INTO silver.crm_prd_info (
            prd_id,
            cat_id,
            prd_key,
            prd_nm,
            prd_cost,
            prd_line,
            prd_start_dt,
            prd_end_dt
        )
        SELECT
            prd_id,
            -- DERIVED COLUMNS
            SUBSTRING(prd_key, 1, 5) as cat_id,
            SUBSTRING(prd_key, 7, LENGTH(prd_key)) AS prd_key,
            prd_nm,
            -- REPLACING NULL VALUES
            COALESCE(prd_cost, 0) AS prd_cost,
            -- DATE NORMALIZATION AND STANDARDIZATION
            CASE
                WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
                WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
                WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
                WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
                ELSE 'n/a'
            END AS prd_line,
            prd_start_dt,
            -- DATE ENRICHMENT
            LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt) - 1 as prd_end_dt
        FROM bronze.crm_prd_info;

        end_time := clock_timestamp(); -- Record end time for this table
        duration := end_time - start_time; -- Calculate duration
        RAISE NOTICE 'Successfully loaded silver.crm_prd_info.';
        RAISE NOTICE '>> Duration to Load silver.crm_prd_info Table: %', duration;
    EXCEPTION
        WHEN data_exception THEN
            RAISE WARNING 'Data error loading silver.crm_prd_info: SQLSTATE % - %', SQLSTATE, SQLERRM;
        WHEN OTHERS THEN
            RAISE WARNING 'An unexpected error occurred loading silver.crm_prd_info: SQLSTATE % - %', SQLSTATE, SQLERRM;
    END;

    -- --- Load silver.crm_sales_details ---
    BEGIN
        start_time := clock_timestamp(); -- Record start time for this table
        RAISE NOTICE 'Attempting to load silver.crm_sales_details...';
        TRUNCATE TABLE silver.crm_sales_details;
        INSERT INTO silver.crm_sales_details (
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            -- Handling NULL values in sls_order_dt 
            CASE sls_order_dt
				WHEN NULL THEN sls_ship_dt - 7 
				ELSE sls_order_dt
			END AS sls_order_dt,
            sls_ship_dt,
            sls_due_dt,
            sls_sales,
            sls_quantity,
            sls_price
        )
        SELECT
            sls_ord_num,
            sls_prd_key,
            sls_cust_id,
            sls_order_dt,
            sls_ship_dt,
            sls_due_dt,
            -- HANDLING MISSING AND INVALID DATA
            CASE
                WHEN sls_sales <> sls_quantity * ABS(sls_price) OR sls_sales IS NULL OR sls_sales <= 0 THEN sls_quantity * ABS(sls_price)
                ELSE sls_sales
            END AS sls_sales,
            sls_quantity,
            -- HANDLING MISSING AND INVALID DATA
            CASE
                WHEN sls_price IS NULL OR sls_price <= 0 THEN (sls_sales / NULLIF(sls_quantity, 0))
                ELSE sls_price
            END as sls_price
        FROM bronze.crm_sales_details;

        end_time := clock_timestamp(); -- Record end time for this table
        duration := end_time - start_time; -- Calculate duration
        RAISE NOTICE 'Successfully loaded silver.crm_sales_details.';
        RAISE NOTICE '>> Duration to Load silver.crm_sales_details Table: %', duration;
    EXCEPTION
        WHEN data_exception THEN
            RAISE WARNING 'Data error loading silver.crm_sales_details: SQLSTATE % - %', SQLSTATE, SQLERRM;
        WHEN OTHERS THEN
            RAISE WARNING 'An unexpected error occurred loading silver.crm_sales_details: SQLSTATE % - %', SQLSTATE, SQLERRM;
    END;


    RAISE NOTICE '---------------------------------------------';
    RAISE NOTICE 'Loading ERP Tables to Silver Layer';
    RAISE NOTICE '---------------------------------------------';

    -- --- Load silver.erp_cust_az12 ---
    BEGIN
        start_time := clock_timestamp(); -- Record start time for this table
        RAISE NOTICE 'Attempting to load silver.erp_cust_az12...';
        TRUNCATE TABLE silver.erp_cust_az12;
        INSERT INTO silver.erp_cust_az12 (
            cid,
            bdate,
            gen
        )
        SELECT
            -- HANDLING INVALID VALUES (assuming target cid is also text/varchar)
            SUBSTRING(cid, 4, LENGTH(cid)) AS cid,
            CASE
                WHEN bdate > NOW() THEN NULL
                ELSE bdate
            END AS bdate,
            -- DATA NORMALIZATION AND STANDARDIZATION
            CASE
                WHEN UPPER(TRIM(gen)) IN ('M','MALE') THEN 'Male'
                WHEN UPPER(TRIM(gen)) IN ('F','FEMALE') THEN 'Female'
                ELSE 'n/a'
            END as gen
        FROM bronze.erp_cust_az12;

        end_time := clock_timestamp(); -- Record end time for this table
        duration := end_time - start_time; -- Calculate duration
        RAISE NOTICE 'Successfully loaded silver.erp_cust_az12.';
        RAISE NOTICE '>> Duration to Load silver.erp_cust_az12 Table: %', duration;
    EXCEPTION
        WHEN data_exception THEN
            RAISE WARNING 'Data error loading silver.erp_cust_az12: SQLSTATE % - %', SQLSTATE, SQLERRM;
        WHEN OTHERS THEN
            RAISE WARNING 'An unexpected error occurred loading silver.erp_cust_az12: SQLSTATE % - %', SQLSTATE, SQLERRM;
    END;

    -- --- Load silver.erp_loc_a101 ---
    BEGIN
        start_time := clock_timestamp(); -- Record start time for this table
        RAISE NOTICE 'Attempting to load silver.erp_loc_a101...';
        TRUNCATE TABLE silver.erp_loc_a101;
        INSERT INTO silver.erp_loc_a101 (
            cid,
            cntry
        )
        SELECT
            -- HANDLING invalid Values (assuming target cid is also text/varchar)
            REPLACE(cid, '-', '') cid,
            -- HANDLING invalid values, missing values and Data Cleaning
            CASE
                WHEN UPPER(TRIM(cntry)) IN ('US', 'USA', 'UNITED STATES') THEN 'United States'
                WHEN UPPER(TRIM(cntry)) IN ('DE', 'GERMANY') THEN 'Germany'
                WHEN UPPER(TRIM(cntry)) IN ('AUSTRALIA', 'FRANCE', 'CANADA', 'UNITED KINGDOM') THEN TRIM(cntry)
                ELSE 'n/a'
            END as cntry
        FROM bronze.erp_loc_a101;

        end_time := clock_timestamp(); -- Record end time for this table
        duration := end_time - start_time; -- Calculate duration
        RAISE NOTICE 'Successfully loaded silver.erp_loc_a101.';
        RAISE NOTICE '>> Duration to Load silver.erp_loc_a101 Table: %', duration;
    EXCEPTION
        WHEN data_exception THEN
            RAISE WARNING 'Data error loading silver.erp_loc_a101: SQLSTATE % - %', SQLSTATE, SQLERRM;
        WHEN OTHERS THEN
            RAISE WARNING 'An unexpected error occurred loading silver.erp_loc_a101: SQLSTATE % - %', SQLSTATE, SQLERRM;
    END;


    -- --- Load silver.erp_px_cat_g1v2 ---
    BEGIN
        start_time := clock_timestamp(); -- Record start time for this table
        RAISE NOTICE 'Attempting to load silver.erp_px_cat_g1v2...';
        TRUNCATE TABLE silver.erp_px_cat_g1v2;
        INSERT INTO silver.erp_px_cat_g1v2 (
            id,
            cat,
            subcat,
            maintenance
        )
        SELECT
            id,
            cat,
            subcat,
            maintenance
        FROM bronze.erp_px_cat_g1v2;

        end_time := clock_timestamp(); -- Record end time for this table
        duration := end_time - start_time; -- Calculate duration
        RAISE NOTICE 'Successfully loaded silver.erp_px_cat_g1v2.';
        RAISE NOTICE '>> Duration to Load silver.erp_px_cat_g1v2 Table: %', duration;
    EXCEPTION
        WHEN data_exception THEN
            RAISE WARNING 'Data error loading silver.erp_px_cat_g1v2: SQLSTATE % - %', SQLSTATE, SQLERRM;
        WHEN OTHERS THEN
            RAISE WARNING 'An unexpected error occurred loading silver.erp_px_cat_g1v2: SQLSTATE % - %', SQLSTATE, SQLERRM;
    END;

    batch_end_time := clock_timestamp(); -- End calculating the loading time of the whole Silver Layer
    batch_duration := batch_end_time - batch_start_time; -- Calculate Batch Duration

    RAISE NOTICE '=============================================';
    RAISE NOTICE 'Silver Layer Loading Complete.';
    RAISE NOTICE '>> Duration to Load the Silver Layer: %', batch_duration;
    RAISE NOTICE '=============================================';

END;
$$;

-- Call the procedure to execute it
CALL silver.load_silver_data();
